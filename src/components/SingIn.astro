---

---

<div class="flex justify-center items-center min-h-[200px]">
  <button
    id="google"
    class="bg-white text-gray-800 font-medium py-2 px-4 border border-gray-300 rounded-lg shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 flex items-center transition-colors"
  >
    <svg
      class="h-5 w-5 mr-2"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
    >
      <path
        d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032 s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2 C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
        fill="#4285F4"></path>
      <path
        d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032 s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2 C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
        fill="#34A853"
        clip-path="url(#b)"></path>
      <path
        d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032 s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2 C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
        fill="#FBBC05"
        clip-path="url(#c)"></path>
      <path
        d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032 s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2 C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
        fill="#EA4335"
        clip-path="url(#d)"></path>
    </svg>
    Sign in with Google
  </button>
</div>

<div
  id="loading"
  class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
>
  <div class="bg-white p-5 rounded-lg flex flex-col items-center">
    <div
      class="animate-spin rounded-full h-10 w-10 border-4 border-blue-500 border-t-transparent"
    >
    </div>
    <p class="mt-3 text-gray-700">Signing in...</p>
  </div>
</div>

<script>
  import {
    getAuth,
    inMemoryPersistence,
    GoogleAuthProvider,
    signInWithPopup,
  } from "firebase/auth";
  import { app } from "../firebase/client";

  document.addEventListener("DOMContentLoaded", () => {
    const auth = getAuth(app);
    auth.setPersistence(inMemoryPersistence);

    const googleSignin = document.getElementById("google");
    const loadingEl = document.getElementById("loading");

    if (googleSignin && loadingEl) {
      googleSignin.addEventListener("click", async () => {
        try {
          // Show loading indicator
          loadingEl.classList.remove("hidden");

          const provider = new GoogleAuthProvider();
          const userCredential = await signInWithPopup(auth, provider);
          const idToken = await userCredential.user.getIdToken();

          const res = await fetch("/api/auth/signin", {
            headers: {
              Authorization: `Bearer ${idToken}`,
            },
          });

          if (res.status === 401) {
            loadingEl.classList.add("hidden");
            showNotification(
              "You are not authorized to access this application",
              "error",
            );
            return;
          }

          if (res.redirected) {
            window.location.href = res.url;
          } else {
            loadingEl.classList.add("hidden");
          }
        } catch (error) {
          console.error("Error during sign-in:", error);
          loadingEl.classList.add("hidden");
          showNotification(
            "An error occurred during sign-in. Please try again.",
            "error",
          );
        }
      });
    } else {
      console.error("Required elements not found");
    }
  });

  function showNotification(message: string, type: "error" | "success"): void {
    const notification = document.createElement("div");
    notification.className = `fixed bottom-4 right-4 p-4 rounded-md shadow-lg ${
      type === "error" ? "bg-red-500" : "bg-green-500"
    } text-white max-w-sm z-50`;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.classList.add(
        "opacity-0",
        "transition-opacity",
        "duration-500",
      );
      setTimeout(() => {
        document.body.removeChild(notification);
      }, 500);
    }, 5000);
  }
</script>
