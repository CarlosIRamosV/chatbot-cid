---
import { GET } from "@api/settings/whitelist";

let response;
let data = [];
try {
  response = await GET(Astro);
  data = await response.json();
} catch (error) {
  console.error("Error fetching whitelist:", error);
}
---

<div class="p-6 bg-white rounded-lg shadow-md">
  <h2 class="text-2xl font-bold text-gray-800 mb-4">Whitelist</h2>
  <p class="text-gray-600 mb-6">
    Add email addresses to the whitelist. Only users with whitelisted addresses
    can sign in to the dashboard.
  </p>

  <form class="mb-8">
    <div class="flex gap-2">
      <label class="flex-1">
        <input
          type="email"
          placeholder="Email"
          required
          class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </label>
      <button
        is="add-whitelist-button"
        class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        Add
      </button>
    </div>
  </form>

  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-100">
        <tr>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Email</th
          >
          <th
            class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
            >Actions</th
          >
        </tr>
      </thead>
      <tbody id="whitelist" class="bg-white divide-y divide-gray-200">
        {
          data.map((email: string) => (
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap text-gray-700">{email}</td>
              <td class="px-6 py-4 whitespace-nowrap text-right">
                <button
                  is="delete-whitelist-button"
                  id={email}
                  class="text-red-500 hover:text-red-700 font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 rounded"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  <div id="notification-container" class="fixed bottom-4 right-4 z-50"></div>
</div>

<script>
  // Helper function to show notifications
  function showNotification(message: string, type: "error" | "success"): void {
    const container = document.getElementById("notification-container");
    if (!container) return;

    const notification = document.createElement("div");
    notification.className = `p-4 rounded-md shadow-lg ${
      type === "error" ? "bg-red-500" : "bg-green-500"
    } text-white max-w-sm mb-3`;
    notification.textContent = message;

    container.appendChild(notification);

    setTimeout(() => {
      notification.classList.add(
        "opacity-0",
        "transition-opacity",
        "duration-500",
      );
      setTimeout(() => {
        container.removeChild(notification);
      }, 500);
    }, 5000);
  }

  class AddButton extends HTMLButtonElement {
    constructor() {
      super();
      this.addEventListener("click", async (e) => {
        e.preventDefault();
        const form = this.closest("form");
        if (!form) return;

        const input = form.querySelector("input");
        if (!input) return;

        const email = input.value.trim();
        if (!email || !email.includes("@")) {
          showNotification("Please enter a valid email address.", "error");
          return;
        }

        try {
          this.disabled = true;
          this.innerHTML = `
            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Adding...
          `;

          const res = await fetch(`/api/settings/whitelist/`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ email }),
          });

          if (res.ok) {
            // Add new row to the table
            const tr = document.createElement("tr");
            tr.className = "hover:bg-gray-50";
            tr.innerHTML = `
              <td class="px-6 py-4 whitespace-nowrap text-gray-700">${email}</td>
              <td class="px-6 py-4 whitespace-nowrap text-right">
                <button 
                  is="delete-whitelist-button" 
                  id="${email}"
                  class="text-red-500 hover:text-red-700 font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 rounded"
                >
                  Delete
                </button>
              </td>
            `;

            const whitelist = document.querySelector("#whitelist");
            if (whitelist) {
              whitelist.appendChild(tr);

              // Clear the input field
              input.value = "";
              showNotification(
                `${email} added to whitelist successfully`,
                "success",
              );
            }
          } else {
            const errorData = await res.json().catch(() => ({}));
            showNotification(
              errorData.message || "Failed to add email to whitelist",
              "error",
            );
          }
        } catch (error) {
          console.error("Error adding email to whitelist:", error);
          showNotification("An error occurred while adding the email", "error");
        } finally {
          this.disabled = false;
          this.textContent = "Add";
        }
      });
    }
  }

  class DeleteButton extends HTMLButtonElement {
    constructor() {
      super();
      this.addEventListener("click", async () => {
        const email = this.id;
        if (
          !confirm(
            `Are you sure you want to remove ${email} from the whitelist?`,
          )
        ) {
          return;
        }

        try {
          const originalText = this.textContent;
          this.disabled = true;
          this.textContent = "Deleting...";

          const res = await fetch(`/api/whitelist/`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ email }),
          });

          if (res.ok) {
            const tr = this.closest("tr");
            if (tr) {
              tr.remove();
              showNotification(`${email} removed from whitelist`, "success");
            }
          } else {
            const errorData = await res.json().catch(() => ({}));
            showNotification(
              errorData.message || "Failed to delete email from whitelist",
              "error",
            );
            this.textContent = originalText;
            this.disabled = false;
          }
        } catch (error) {
          console.error("Error deleting email from whitelist:", error);
          showNotification(
            "An error occurred while removing the email",
            "error",
          );
          this.textContent = "Delete";
          this.disabled = false;
        }
      });
    }
  }

  customElements.define("add-whitelist-button", AddButton, {
    extends: "button",
  });
  customElements.define("delete-whitelist-button", DeleteButton, {
    extends: "button",
  });
</script>
